#!usr/bin/env python3


from instapy.image_filters import greyscale_image, sepia_image
from argparse import ArgumentParser
import timeit

def main(args):

    if args.runtime:
      t = 0
      if args.sepia:
        if args.implement == "python":
            t = timeit.timeit(stmt= lambda: sepia_image(args.file, scale=args.scale, implementation=args.implement, step=args.step), number = 3)
        elif args.implement == "numpy":
            t = timeit.timeit(stmt= lambda: sepia_image(args.file, scale=args.scale, implementation=args.implement, step=args.step), number = 3)
        elif args.implement == "numba":
            t = timeit.timeit(stmt= lambda: sepia_image(args.file, scale=args.scale, implementation=args.implement, step=args.step), number = 3)
      elif args.grey:
        if args.implement == "python":
            t = timeit.timeit(stmt= lambda: greyscale_image(args.file, scale=args.scale, implementation=args.implement), number = 3)
        elif args.implement == "numpy":
            t = timeit.timeit(stmt= lambda: greyscale_image(args.file, scale=args.scale, implementation=args.implement), number = 3)
        elif args.implement == "numba":
            t = timeit.timeit(stmt= lambda: greyscale_image(args.file, scale=args.scale, implementation=args.implement), number = 3)
      t = t/3
      print(f"Average time over 3 runs: {t}")
      return

    if args.step != 1 and args.grey:
      print("usage: instapy [-h] (-g | -se) [-st STEP] -f FILE [-sc SCALE] [-i {python,numpy,numba}] [-o OUT]\ninstapy: error: argument -st/--step: not allowed with argument -g/--grey\n")
      return


    if args.sepia:
        sepia_image(args.file, args.out, args.scale, args.implement, args.step)
    elif args.grey:
        greyscale_image(args.file, args.out, args.scale, args.implement)

def parse():
    parser = ArgumentParser()
    #Has to choose either greyscale or sepia filter, but not both
    filters = parser.add_mutually_exclusive_group(required=True)

    filters.add_argument("-g", "--grey", action="store_true", help="select the greyscale filter")
    filters.add_argument("-se", "--sepia", action="store_true", help="select the sepia filter")

    parser.add_argument("-st", "--step", type=float, default=1.0, help="intensity of sepia-filter, from 0.0-1.0")
    parser.add_argument("-r", "--runtime", action="store_true", help="prints average runtime of chosen implementation over three runs, defaults to numpy")


    parser.add_argument("-f", "--file", required=True, help="filename of the image to be filtered")
    parser.add_argument("-sc", "--scale", type=float, default=1.0, help="resize the image, 1.0 is the original size")
    parser.add_argument("-i", "--implement", choices=['python', 'numpy', 'numba'], default='numpy', help="select implementation")
    parser.add_argument("-o", "--out", default=None, help="choose a filename for the output")
    args = parser.parse_args()
    return args

if __name__ == '__main__':
    args = parse()
    main(args)
